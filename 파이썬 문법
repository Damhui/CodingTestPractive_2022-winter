파이썬 문법

* 나누기 했을때 소수로 나오게 하려면?
  => (float)로 형변환하고 나누기! + 소수점 자릿수 제한하고 싶으면 round(실수, 표기할 자릿수) 이용
  cf. // : 나눗셈 결과가 int로 나옴. / : 나눗셈 결과가 float로 나옴. % : 나머지
  
* for 반복문을 통해 리스트 순회하려면?
  => for i in range(len(arr)):
      ~~
  cf. range(0): empty 리스트 [] (0부터 0 이전까지의 숫자는 존재하지 않음)
      
* 역순 리스트를 만드려면?
newarr = []
1. 뒤에서부터 순회해서 newarr 앞에부터 append
for i in range(len(oldarr)-1, -1, -1):
      newarr.append(oldarr[i])
2. 음수 인덱스 사용
for i in range (1, len(oldarr)+1):
      newarr.append(oldarr[-i])
3. 앞에서부터 순회해서 newarr 뒤에부터 값 할당(값 할당하기 위해서는 미리 정해진 크기만큼 값 초기화해야함)
newarr = [0 for i in range(len(oldarr))] #미리 할당해놓고 값을 바꿈
   for j in range (len(oldarr)):
      newarr[len(oldarr)-1-j] = oldarr[j]
4. reverse()를 통해 oldarr 뒤집기
oldarr.reverse();
   for i in range(len(oldarr)):
      newarr.append(oldarr[i]);
5. reversed()를 통해 oldarr 임시로 뒤집기
for item in reversed(oldarr):
    newarr.append(item);
    
* && || 대신 and or 사용
* 증감연산자 -- ++ 없음. += 1 -=1 사용
* 문자열도 리스트다. 인덱스 0

* 문자열에서 특정 문자 제거 방법 2가지
1. str.replace(A,B) : A문자열을 B로 바꾸기
2. re.sub(A,B,str) : A문자열을 B로 바꾸기

* 문자열에서 특정 문자 바꾸기
1. str.replace(A,B) : A문자열을 B로 바꾸기
2. re.sub(A,B,str) : A문자열을 B로 바꾸기
3. str.maketrans('abcde', '12345') : a를 1로, b를 2로, ... , e를 5로 바꿈

* 문자열에서 특정 인덱스의 문자 바꾸기
1. list() + join() : 문자열을 리스트로 만들어서 쪼개고 수정하고 다시 하나의 문자열로 합치기 
예)
a = 'ABC'
a = list(a) 
a[0] = 'a'
a = ''.join(a)
cf.
str[index] = A # 오류. 문자열은 immutable type이라 수정할 수 없음
str.replace(str[index], A) : 오류. replace는 인덱스로 접근 불가

* 문자열 원하는 index로 자르기
1. str[시작인덱스, 끝 인덱스+1]

* 리스트 정렬
1. sort() - 리스트 본체 정렬
list.sort() : 기본 오름차순 (문자열은 알파벳 순)
list.sort(reverse=True) : 내림차순
list.sort(key=len) : len을 기준으로 길이가 짧은것부터 긴 것 순서(오름차순)
2. sorted() - 정렬된 리스트를 반환
sorted(list) : 오름차순
reversed(list) : 내림차순
cf. 문자열 자체를 정렬할 때는 str.sort() 하면 오류!! 문자열은 immutable type이라 수정할 수 없음
=> sorted() + join()
sorted(str) : 리턴타입이 list이므로 다시 문자열로 만드려면 join 해야함 
예) ''.join(sorted(str))

* 리스트 중복 제거 
1. set 이용 -> 순서 보장X
예)arr = [1,2,2,3,1,4]
list(set(arr))
2. for 반복문 이용
예) arr = [1,2,2,3,1,4]
    result = []
    for i in arr:
      if i not in result:
        result.append(i)
3. dictionary 이용
dict.fromkeys(iterable) 메서드 : 인자로 들어온 iterable 데이터를 key값으로 해서 딕셔너리 자료형을 만듬 (key는 중복x)
예)arr = [1,2,2,3,1,4]
new_dict = dict.fromkeys(arr) # {1:None, 2:None, 3:None, 4:None}
list(new_dict) # [1,2,3,4]

* 리스트 삽입
1. array.append(삽입할 값) : 원소 마지막에 추가
2. array.insert(index, 값)
3. + 연산자로 더하기

* 리스트 삭제
1. del array[index]
2. array.remove(삭제할 값)

* 문자열 안에 특정 문자열이 포함되어 있는지 확인
1. if A in B : B 문자열 안에 A 문자열이 있는지
2. B.find(A) : B 문자열 안에 A 문자열이 있으면 그 위치에 해당하는 index 리턴. 없으면 -1 리턴

* char을 int로 바꾸는 법
ord('a') #97
chr(97) #'a'

cf. C처럼 'a'-'a' 안됨!!

* map : 리스트의 요소를 지정된 함수로 처리해주는 함수
- list(map(함수, 리스트)) 또는 tuple(map(함수, 튜플))
예1) 
a = [1.2, 2.2, 3.2, 4.2]
방법1. for loop
for i in range(len(a)):
  a[i] = int(a[i])
방법2. map
a = list(map(int, a))
예2)
a = list(map(str,range(10))) # ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
* map과 input().split() 결합
input().split() # ['10', '20'] 
list(map(int, input().split())) # [10, 20]

[ 대문자 소문자 ]
* 대문자인지 소문자인지 검사
string.isupper() string.islower()
* 대문자/소문자로 바꾸기
string.upper() string.lower()

* 문자열이 정수인지 확인
str.isdigit()

*리스트에서 max값 찾기
max(array)

*리스트에서 target의 index 찾기
array.index(target)

* 최대공약수
math.gcd(66,22,11) #11
* 최소공배수
math.lcm(66,22,11) #66

* count() : 문자열(iterable 자료형 가능) 안에서 찾고 싶은 문자의 개수를 찾을 때
1. 문자열에서 사용
s = 'oooyy'
s.count('y') #2
- 특정 범위 지정 (끝 인덱스는 포함 안됨)
s.count('y',0,3) # 0 (s[0]~s[2] 내에서 'y'의 개수)

2. 리스트에서 사용
arr = [1,1,1,2,3]
arr.count(1) #3









