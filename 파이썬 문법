파이썬 문법

* 1+2+...+n = (n+1)*n/2

* range()
- range(0): empty 리스트 [] (0부터 0 이전까지의 숫자는 존재하지 않음)
- 세번째 파라미터(간격)에 0이 오면 오류남

* int() : 정수형으로 형변환
- int(str) 에서 문자열의 부호도 인식해서 변환해줌

* 구분자.join(문자열) : 문자열 리스트를 문자열로 합쳐줌

* zip()
- 입력인자: 여러개의 순회가능한(iterable)객체
- 출력인자: 각 객체가 담고있는 원소를 튜플 형태로 차례로 접근할 수 있는 반복자(iterator)를 반환
- when use? 서로다른 리스트(iterable) 객체들의 원소를 쌍으로 묶어서 튜플로 만들고 싶을때
예1) 병렬처리
for number, upper, lower in zip("12345", "ABCDE", "abcde"):
...     print(number, upper, lower)
...
1 A a
2 B b
3 C c
4 D d
5 E e
예2) unzip
>>> numbers = (1, 2, 3)
>>> letters = ("A", "B", "C")
>>> pairs = list(zip(numbers, letters))
>>> print(pairs)
[(1, 'A'), (2, 'B'), (3, 'C')]
>>> numbers, letters = zip(*pairs)
>>> numbers
(1, 2, 3)
>>> letters
('A', 'B', 'C')
예3) 사전변환
* dict()는 키와 값으로 이루어진 튜플을 받으면 사전이 생성됨
>>> dict(zip(["year", "month", "date"], [2001, 1, 31]))
{'year': 2001, 'month': 1, 'date': 31}
- 주의사항 : 인자의 길이가 다를때, 가장 짧은 인자를 기준으로 엮이고 나머지는 버려짐

* 나누기 했을때 소수로 나오게 하려면?
  => (float)로 형변환하고 나누기! + 소수점 자릿수 제한하고 싶으면 round(실수, 표기할 자릿수) 이용
  cf. // : 나눗셈 결과가 int로 나옴. / : 나눗셈 결과가 float로 나옴. % : 나머지
  
* for 반복문을 통해 리스트 순회하려면?
  => for i in range(len(arr)):
      ~~

* 역순 리스트를 만드려면?
newarr = []
1. 뒤에서부터 순회해서 newarr 앞에부터 append
for i in range(len(oldarr)-1, -1, -1):
      newarr.append(oldarr[i])
2. 음수 인덱스 사용
for i in range (1, len(oldarr)+1):
      newarr.append(oldarr[-i])
3. 앞에서부터 순회해서 newarr 뒤에부터 값 할당(값 할당하기 위해서는 미리 정해진 크기만큼 값 초기화해야함)
newarr = [0 for i in range(len(oldarr))] #미리 할당해놓고 값을 바꿈
   for j in range (len(oldarr)):
      newarr[len(oldarr)-1-j] = oldarr[j]
4. reverse()를 통해 oldarr 뒤집기
oldarr.reverse();
   for i in range(len(oldarr)):
      newarr.append(oldarr[i]);
5. reversed()를 통해 oldarr 임시로 뒤집기
for item in reversed(oldarr):
    newarr.append(item);
    
* && || 대신 and or 사용
* 증감연산자 -- ++ 없음. += 1 -=1 사용
* 문자열도 리스트다. 인덱스 0

* 문자열 순서 뒤집기
1. slice이용 => str[::-1]
2. reversed()이용 => "".join(reversed(str))
3. for loop 이용=> 

* 문자열에서 특정 문자 제거 방법 2가지
1. str.replace(A,B) : A문자열을 B로 바꾸기
2. re.sub(A,B,str) : A문자열을 B로 바꾸기

* 문자열에서 특정 문자 바꾸기
1. str.replace(A,B) : A문자열을 B로 바꾸기
2. re.sub(A,B,str) : A문자열을 B로 바꾸기
3. str.maketrans('abcde', '12345') : a를 1로, b를 2로, ... , e를 5로 바꿈

* 문자열에서 특정 인덱스의 문자 바꾸기
1. list() + join() : 문자열을 리스트로 만들어서 쪼개고 수정하고 다시 하나의 문자열로 합치기 
예)
a = 'ABC'
a = list(a) 
a[0] = 'a'
a = ''.join(a)
cf.
str[index] = A # 오류. 문자열은 immutable type이라 수정할 수 없음
str.replace(str[index], A) : 오류. replace는 인덱스로 접근 불가

* 문자열 원하는 index로 자르기
1. str[시작인덱스, 끝 인덱스+1]

* 리스트 정렬
sort() 함수는 stable 정렬 => (stable은 중복된 값을 입력된 순서와 동일하게 정렬)
1. sort() - 리스트 본체 정렬
list.sort() : 기본 오름차순 (문자열은 알파벳 순)
list.sort(reverse=True) : 내림차순
list.sort(key=len) : len을 기준으로 길이가 짧은것부터 긴 것 순서(오름차순)
2. sorted() - 정렬된 리스트를 반환
sorted(list) : 오름차순
sorted(list, key = ..., reverse = True) : 내림차순
3. key가 여러개일때 (다중조건 정렬)
https://school.programmers.co.kr/learn/courses/30/lessons/120880

key = lambda x: (x[0], x[1]) 먼저 적용할 정렬조건 먼저 쓰기.
key = lambda x: (-x[0], x[1]) 내림차순으로 하고싶으면 마이너스 부호 붙이기
cf. 문자열 자체를 정렬할 때는 str.sort() 하면 오류!! 문자열은 immutable type이라 수정할 수 없음
=> sorted() + join()
sorted(str) : 리턴타입이 list이므로 다시 문자열로 만드려면 join 해야함 
예) ''.join(sorted(str))

* 딕셔너리 정렬
sort() 불가. sorted() 이용
정렬은 리스트/튜플만 가능하므로, dict.items()를 이용해 각 (key,value) 꼴로 튜플형요소로 바꾸고 전체를 리스트로 만듬 
=> {key:value, key:value,...} --> [(key,value),(key,value),...]
1. 키를 기준으로 오름차순 정렬 => sorted(dict.items())
2. 키를 기준으로 내림차순 정렬 => sorted(dict.items(), reverse=True)
3. 값을 기준으로 오름차순 정렬 => sorted(dict.items(), key = lambda x:x[1])
4. 값을 기준으로 내림차순 정렬 => sorted(dict.items(), key = lambda x:x[1], reverse=True)

* 리스트 중복 제거 
1. set 이용 -> 순서 보장X
예)arr = [1,2,2,3,1,4]
list(set(arr))
2. for 반복문 이용
예) arr = [1,2,2,3,1,4]
    result = []
    for i in arr:
      if i not in result:
        result.append(i)
3. dictionary 이용
dict.fromkeys(iterable) 메서드 : 인자로 들어온 iterable 데이터를 key값으로 해서 딕셔너리 자료형을 만듬 (key는 중복x)
예)arr = [1,2,2,3,1,4]
new_dict = dict.fromkeys(arr) # {1:None, 2:None, 3:None, 4:None}
list(new_dict) # [1,2,3,4]

* 리스트 삽입
1. array.append(삽입할 값) : 원소 마지막에 추가
2. array.insert(index, 값)
3. + 연산자로 더하기

* 리스트 삭제
1. del array[index]
2. array.remove(삭제할 값)

* 리스트 복사
- deep 복사 : 같은 메모리 주소 (주소 복사)
list1 = list2 
- shallow 복사 : 다른 메모리 주소 (값 복사)
1. 슬라이싱 list2 = list1[:]
2. list()함수 list2 = list(list1)
3. copy()함수 list2 = list1.copy()

* 문자열 안에 특정 문자열이 포함되어 있는지 확인
1. if A in B : B 문자열 안에 A 문자열이 있는지
2. B.find(A) : B 문자열 안에 A 문자열이 있으면 그 위치에 해당하는 index 리턴. 없으면 -1 리턴

* char을 int로 바꾸는 법
ord('a') #97
chr(97) #'a'

cf. C처럼 'a'-'a' 안됨!!

* map : 리스트의 요소를 지정된 함수로 처리해주는 함수
- list(map(함수, 리스트)) 또는 tuple(map(함수, 튜플))
예1) 
a = [1.2, 2.2, 3.2, 4.2]
방법1. for loop
for i in range(len(a)):
  a[i] = int(a[i])
방법2. map
a = list(map(int, a))
예2)
a = list(map(str,range(10))) # ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
* map과 input().split() 결합
input().split() # ['10', '20'] 
list(map(int, input().split())) # [10, 20]

[ 대문자 소문자 ]
* 대문자인지 소문자인지 검사
string.isupper() string.islower()
* 대문자/소문자로 바꾸기
string.upper() string.lower()

* 문자열이 정수인지 확인
str.isdigit()

*리스트에서 max값 찾기
max(array)

*리스트에서 target의 index 찾기 : index(), find(), rfind()
형태 - '변수. find((sub [, start [, end]]))' / '변수. index((sub [, start [, end]]))' 
차이점 - index()는 target이 없으면 에러발생, find()는 target이 없으면 -1 반환, 문자열에서만 사용가능
예) array.index(target)
a.find('o', 1, 3) # 변수명.find(찾을 대상, 시작인덱스, 끝인덱스
- rfind() : 오른쪽에서부터 찾음 vs find() : 왼쪽에서부터 찾음

* 최대공약수
math.gcd(66,22,11) #11
* 최소공배수
math.lcm(66,22,11) #66

* count() : 문자열(iterable 자료형 가능) 안에서 찾고 싶은 문자의 개수를 찾을 때
1. 문자열에서 사용
s = 'oooyy'
s.count('y') #2
- 특정 범위 지정 (끝 인덱스는 포함 안됨)
s.count('y',0,3) # 0 (s[0]~s[2] 내에서 'y'의 개수)

2. 리스트에서 사용
arr = [1,1,1,2,3]
arr.count(1) #3

https://school.programmers.co.kr/learn/courses/30/lessons/120812

* 딕셔너리
dict = {...}
dict.keys()
dict.values()
dict.items()

* 순열, 조합, 중복순열, 중복조합
import iteratools
- 순열 permutations(반복 가능한 객체, r)
예)
arr = ['A','B','C']
l = list(iteratools.permutations(arr,2))
print(l) # [('A', 'B'), ('A', 'C'), ('B', 'A'), ('B', 'C'), ('C', 'A'), ('C', 'B')]
- 조합 combinations(반복 가능한 객체, r)
m = list(iteratools.combinations(arr,2))
print(m) # [('A', 'B'), ('A', 'C'), ('B', 'C')]
- 중복순열 product(반복 가능한 객체, repeat=1)
- 중복조합 combinations_with_replacement(반복 가능한 객체, r)

* 리스트에서 원하는 값에 따른 인덱스 찾기
리스트명.index(원하는 값,탐색시작인덱스, 탐색끝인덱스)

* 진수 변환
- 10진수를 2,8,16 진수로 변환
bin(), oct(), hex()
- 2,8,16진수를 10진수로 변환
int('0b010010',2)
int('0o52',8)
int('ox2a',16)

* 숫자가 정수인지 소수인지 알아내기
1) 숫자가 정수 또는 부동 소수점 유형인지 여부를 결정합니다.:isinstance()
isinstance(object, type)
예) print(isinstance(i, int)) # True
2) float 유형 숫자가 정수인지 판별합니다(소수점 0자리).:방법1. float.is_integer(), 방법2. float % 1 == 0인지
예) print(f.is_integer()) # False
3) 숫자 문자열이 정수인지 확인 : str.isdigit()
예) str.isdigit(s1)  #False

* 약수의 개수
- 범위를 제곱수(num**0.5)로 하자

* 소수의 개수
- 방법1. 범위를 제곱수(num**0.5)로 하자 
- 방법2. 에라토스테네스의 체 : 소수를 찾으면 그 소수의 배수는 모두 제외시키자

* heap : 정렬 방법 중 하나. 최소값만 리턴 -> O(logN)
from heapq import heappush,heappop,heapify

* 해시 : 탐색에 특화된 자료구조 -> 평균 O(1), 최악 O(N)
[파이썬에서 구현]
딕셔너리 이용 --> 리스트보다 딕셔너리가 더 빠름!!!!!!!!!!!!!!
- 찾고자하는 키 in 딕셔너리 -> T/F 리턴
- 딕셔너리.get(찾고자하는 키) -> 키값에 해당하는 값을 리턴
- dict.items()
- dict.values()
- dict.keys()

[장점]
- 해시 충돌이 없는 상태에서 배열, 리스트 같은 선형적인 구조는 물론 트리와 같은 선형적인 구조보다 빠른 탐색
- 해시를 사용하기에 해시 값을 알아도 key를 예측하기 어려움
[단점]
- 해시 충돌 발생 시 탐색이 시간 복잡도 O(N)에 점점 수렴함
- 정렬이나 순차적인 메모리 저장이 필요한 경우 적합하지 않음
- 해시 함수의 성능에 따라 해시 테이블 전체 성능이 크게 영향을 받는다.

* startswith()

* global / nonlocal 키워드
var = "aa" # 전역변수
def outer():
    var = "bb" # global 쓰면 전역변수 가리킴, global안쓰면 outer()내의 지역변수 생성
    def inner():
        var = "cc" # nonlocal 쓰면 outer()의 비지역변수 가리킴, nonlocal 안쓰면 inner()내의 지역변수 생성

- global 키워드 : 일반 함수 내에서 전역(global/module) 변수를 대상
동일한 이름의 지역 변수를 생성하지 않고, 전역 변수의 값을 함수 내부에서 변경
(함수 안에서 변수 앞에 global 키워드를 붙여주면 해당 변수는 새로운 지역 변수가 되지 않고 함수 밖에서 이미 선언된 전역 변수를 가리키게 됨)
- nonlocal 키워드 : 중첩 함수 내에서 비지역(nonlocal/closing) 변수를 대상

* Counter : 항목의 개수를 셀 때, 
from collections import Counter
- 리턴 : 딕셔너리 형태 (key값으로 요소의 이름, value값으로 요소들의 횟수, value값이 큰 순으로(횟수가 많은 순))
예) a = 'abbcccdddd'
Counter(a) # {'d':4, 'c':3, 'b':2, 'a':1}

* count() VS Counter
- 요소 하나의 개수를 셀 때
> count()의 시간복잡도 = O(N) : 요소 개수를 구하기 위해 리스트 전체 한번 순회
> Counter 클래스의 시간복잡도 = O(N) : 요소의 개수를 구하기 위해 리스트 전체를 한번 순회하면서 딕셔너리 만듬
- 리스트 요소 전체의 개수를 셀 때
> count() : O(N**2)
> Counter : O(N)

=> 리스트 요소 전체의 개수를 셀 때는 count() 말고 딕셔너리인 Counter나 해시 사용!!!

* 집합 set
[함수]
- 값 1개만 추가 : add
>>> s1 = set([1, 2, 3])
>>> s1.add(4)
>>> s1
{1, 2, 3, 4}
- 값 여러개 추가 : update
>>> s1 = set([1, 2, 3])
>>> s1.update([4, 5, 6])
>>> s1
{1, 2, 3, 4, 5, 6}
- 특정값 제거 : remove
>>> s1 = set([1, 2, 3])
>>> s1.remove(2)
>>> s1
{1, 3}

!! set(집합) 내부 원소는 다양한 값을 함께 가질 수 있지만, mutable한 값은 가질수 없음
=> 집합의 원소로 불가능한것: 리스트, set, dict
=> 집합의 원소로 가능한것: 튜플, 문자열, 숫자

* 정규표현식

